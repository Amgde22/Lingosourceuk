---
import BaseLayout from "@layouts/BaseLayout.astro";
import { t } from "i18n:astro";
import { getOptimizedImage } from "@utils/utils";

import mobileLandingImage from "@assets/images/hero.png";

const optimizedMobileLandingImage = await getOptimizedImage(mobileLandingImage);

// Fetch the entire termsOfService object from your i18n JSON file
const terms = t("legal:termsOfService" , {returnObjects:true});

---

<BaseLayout
  title={terms.title}
  description={terms.introduction.content[0]}
  preloadedImage={optimizedMobileLandingImage}
>
  <!-- This div is a placeholder for a fixed header, keeping it as requested -->
  <div class="place-taker"></div>

 
<style lang="less">
  .terms-container {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
    line-height: 1.6;
    color: #333;
    max-width: 800px;
    margin: 2rem auto;
    padding: 1rem 2rem;
    background-color: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
  }

  h1, h2, h3, h4 {
    color: #1a202c;
    line-height: 1.3;
    font-weight: 600;
  }

  h1 {
    font-size: 2.25rem;
    text-align: center;
    margin-bottom: 0.5rem;
    border-bottom: 2px solid #f0f0f0;
    padding-bottom: 1rem;
  }

  .meta-info {
    text-align: center;
    color: #718096;
    font-size: 0.9rem;
    margin-bottom: 2.5rem;
  }

  h2 {
    font-size: 1.75rem;
    margin-top: 2.5rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #e2e8f0;
  }

  h3 {
    font-size: 1.25rem;
    margin-top: 2rem;
    margin-bottom: 0.75rem;
    color: #2d3748;
  }
  
  h4 {
    font-size: 1.1rem;
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
    color: #4a5568;
  }

  p {
    margin-bottom: 1rem;
  }

  ul {
    list-style-type: disc;
    padding-left: 20px;
    margin-bottom: 1rem;

    li {
      margin-bottom: 0.5rem;
    }
  }

  strong {
    font-weight: 600;
    color: #2d3748;
  }
  
  .contact-info {
      background-color: #f7fafc;
      border: 1px solid #e2e8f0;
      padding: 1.5rem;
      border-radius: 6px;
      margin-top: 2rem;
  }

</style>

<div class="terms-container">
  <!-- Main Title and Meta Info -->
  <h1>{terms.title}</h1>
  <div class="meta-info">
    <p>{terms.effectiveDate}</p>
    <p>{terms.lastUpdated}</p>
  </div>

  <!-- Introduction Section -->
  <section class="introduction">
    <h2>{terms.introduction.title}</h2>
    {terms.introduction.content.map((paragraph) => <p>{paragraph}</p>)}
  </section>

  <!-- Main Content Sections -->
  {terms.sections.map((section) => (
    <section id={`section-${section.id}`}>
      <h2>{section.id}. {section.title}</h2>
      
      {/* Render section-level description if it exists */}
      {section.description && <p>{section.description}</p>}
      
      {/* Render section-level list if it exists */}
      {section.list && (
        <ul>
          {section.list.map((item) => (
             <li>
                {typeof item === 'string' ? (
                  item
                ) : (
                  <>
                    <strong>{item.title}</strong> {item.text}
                  </>
                )}
              </li>
          ))}
        </ul>
      )}

      {/* Render Subsections */}
      {section.subsections && section.subsections.map((subsection) => (
        <div class="subsection" id={`subsection-${subsection.id}`}>
          <h3>{subsection.id} {subsection.title}</h3>
          
          {/* Render simple content if it exists */}
          {subsection.content && <p>{subsection.content}</p>}
          
          {/* Render description if it exists */}
          {subsection.description && <p>{subsection.description}</p>}
          
          {/* Render list if it exists */}
          {subsection.list && (
            <ul>
              {subsection.list.map((item) => (
                <li>
                  {typeof item === 'string' ? (
                    item
                  ) : (
                    <>
                      <strong>{item.title}</strong> {item.text}
                    </>
                  )}
                </li>
              ))}
            </ul>
          )}
          
          {/* Render categories if they exist */}
          {subsection.categories && subsection.categories.map((category) => (
            <div class="category">
              <h4>{category.title}</h4>
              <ul>
                {category.list.map((item) => (
                   <li>
                    {typeof item === 'string' ? (
                      item
                    ) : (
                      <>
                        <strong>{item.title}</strong> {item.text}
                      </>
                    )}
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
      ))}
      
      {/* Render closing text if it exists (for Contact section) */}
      {section.closing && <p class="contact-info">{section.closing}</p>}
    </section>
  ))}
</div>
</BaseLayout>