---
import { t , getLocalePath} from "i18n:astro"
import { Icon } from "astro-icon/components"

// Fetch the pricing calculator data from your i18n source
const data = t("CAS:pricingCalc", { returnObjects: true });
---

<section id="pricing-calculator">
  <!-- Wave SVG Separator -->
  <div class="wave-separator">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" preserveAspectRatio="none">
      <path fill="var(--gray-400)" fill-opacity="1" d="M0,224L48,213.3C96,203,192,181,288,176C384,171,480,181,576,208C672,235,768,277,864,282.7C960,288,1056,256,1152,229.3C1248,203,1344,181,1392,170.7L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"></path>
    </svg>
  </div>

  <div class="container">
    <h2 class="section-title">{data.title}</h2>

    <!-- Calculator Input Section -->
    <div class="calculator-prompt">
      <label for="minutes-input" class="prompt-text">{data.prompt}</label>
      <div class="input-group">
        <input type="number" id="minutes-input" min="10" max="480" step="5" value="100">
        <span class="time-unit">{data.timeUnit}</span>
      </div>
      <input type="range" id="minutes-slider" min="10" max="480" step="5" value="100" class="slider">
    </div>

    <!-- Comparison Cards -->
    <div class="comparison-grid">
      <!-- Our Card -->
      <div class="price-card our-card">
        <header class="card-header">
          <img
          loading="lazy"
          decoding="async"
          src="/assets/images/white-logo-icon.png"
          alt="logo"
          height="100%"
        />
          <h3>
            {data.us.title}
          </h3>
        </header>
        <div class="price-display">
            <div class="context-container">
                <p class="price-context">{data.us.price}</p>
                <p class="time-breakdown" id="our-time-breakdown">1 hr 40 min </p>
            </div>
          <span class="price-value" id="our-price">$100.00</span>
          
        </div>
        <!-- MODIFIED LINE: Text is now separate from the value span -->
        <p class="money-saved">{t("CAS:pricingCalc.you_save_x")} <span id="saved-amount">$80.00</span></p>
        <ul class="features-list">
          {data.us.features.map(feature => (
            <li>
              <Icon name="check-circle" class="icon check" />
              <span>{feature}</span>
            </li>
          ))}
        </ul>
        <button
            onclick="openCalendlyDialog()"
            class="cta">
            {t("CAS:cta")}
      </button>
      </div>

      <!-- Competitor Card -->
      <div class="price-card competitor-card">
        <header class="card-header">
          <h3>{data.competitor.title}</h3>
        </header>
        <div class="price-display">
            <div class="context-container">
                <p class="price-context">{data.competitor.price}</p>
                <p class="time-breakdown" id="competitor-time-breakdown">1 hr 40 min</p>
            </div>
          <span class="price-value" id="competitor-price">$180.00</span>
        </div>
        <!-- MODIFIED LINE: Text is now separate from the value span -->
        <p class="money-lost">{t("CAS:pricingCalc.you_lose_x")} <span id="lost-amount">$80.00</span></p>
        <ul class="features-list">
          {data.competitor.unfeatures.map(unfeature => (
            <li class="unfeature">
              <Icon name="x-circle" class="icon cross" />
              <span>{unfeature}</span>
            </li>
          ))}
        </ul>
      </div>
    </div>

    <a
      href={getLocalePath("/phone-answering-serive-pricing")}
      class=" cta-secondary">
      {t("CAS:pricingCalc.us.secondaryCta")}
    </a>
  </div>
</section>

<script>
  // DOM Elements
  const container = document.getElementById('pricing-calculator');
  const minutesInput = document.getElementById('minutes-input');
  const minutesSlider = document.getElementById('minutes-slider');
  const ourPriceEl = document.getElementById('our-price');
  const competitorPriceEl = document.getElementById('competitor-price');
  // MODIFIED SCRIPT: Selecting the new spans for the amounts
  const savedAmountEl = document.getElementById('saved-amount');
  const lostAmountEl = document.getElementById('lost-amount');
  const ourTimeBreakdownEl = document.getElementById('our-time-breakdown');
  const competitorTimeBreakdownEl = document.getElementById('competitor-time-breakdown');

  // Pricing
  const ourRate = 1.0;
  const competitorRate = 1.8;

  function formatTime(totalMinutes) {
    const hours = Math.floor(totalMinutes / 60);
    const minutes = totalMinutes % 60;
    return `${hours} hr ${minutes} min`;
  }

  function updateSliderStyle() {
    const min = minutesSlider.min;
    const max = minutesSlider.max;
    const val = minutesSlider.value;
    const progress = ((val - min) / (max - min)) * 100;
    minutesSlider.style.setProperty('--slider-progress', `${progress}%`);
  }

  function updatePrices(minutes) {
    const validMinutes = Math.max(10, Math.min(480, Number(minutes) || 0));
    const ourTotal = validMinutes * ourRate;
    const competitorTotal = validMinutes * competitorRate;
    const difference = competitorTotal - ourTotal;
    const timeString = formatTime(validMinutes);

    ourPriceEl.textContent = `$${ourTotal.toFixed(2)}`;
    competitorPriceEl.textContent = `$${competitorTotal.toFixed(2)}`;
    
    // MODIFIED SCRIPT: Only update the text content of the amount spans
    savedAmountEl.textContent = `$${difference.toFixed(2)}`;
    lostAmountEl.textContent = `$${difference.toFixed(2)}`;

    ourTimeBreakdownEl.textContent = timeString;
    competitorTimeBreakdownEl.textContent = timeString;
    updateSliderStyle();
  }

  function syncInputs(sourceElement) {
    const value = sourceElement.value;
    if (sourceElement.type === 'number') {
      minutesSlider.value = value;
    } else {
      minutesInput.value = value;
    }
    updatePrices(value);
  }

  minutesInput.addEventListener('input', () => syncInputs(minutesInput));
  minutesSlider.addEventListener('input', () => syncInputs(minutesSlider));
  
  // Initial Calculation on Load
  updatePrices(minutesInput.value);

  // Intersection Observer for Animations
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        container.classList.add('is-visible');
        observer.unobserve(entry.target);
      }
    });
  }, { threshold: 0.1 });

  observer.observe(container);
</script>


<style lang="less" scoped>
// --- Animation Definitions ---
@keyframes slideDownFadeIn {
  from { opacity: 0; transform: translateY(-20px); }
  to { opacity: 1; transform: translateY(0); }
}
@keyframes slideUpFadeIn {
  from { opacity: 0; transform: translateY(30px); }
  to { opacity: 1; transform: translateY(0); }
}


#pricing-calculator {
  position: relative;
  padding: var(--sectionPadding);
  padding-top: 120px;
  background: linear-gradient(
    to bottom, 
    var(--gray-400), 
    color-mix(in srgb, var(--gray-400), black 25%)
  );
  color: var(--gray-700);

  // --- Animation Setup ---
  .section-title, .calculator-prompt, .price-card {
    opacity: 0;
  }
  &.is-visible {
    .section-title, .calculator-prompt {
      animation: slideDownFadeIn 0.7s ease-out forwards;
    }
    .price-card {
      animation: slideUpFadeIn 0.7s ease-out forwards;
    }
    // Staggered Delays
    .section-title { animation-delay: 0.1s; }
    .calculator-prompt { animation-delay: 0.2s; }
    .our-card { animation-delay: 0.4s; }
    .competitor-card { animation-delay: 0.5s; }
  }
}

.wave-separator {
  position: absolute;
  bottom: 100%;
  left: 0;
  width: 100%;
  line-height: 0;
  
  svg {
    position: relative;
    display: block;
    width: 100%;
    height: 150px;
    path {
      fill: var(--gray-400);
    }
  }
}

.container {
  max-width: 900px;
  margin: 0 auto;
  text-align: center;
}

.section-title {
  font-size: var(--headerFontSize);
  color: var(--gray-800);
  font-weight: 700;
  margin-bottom: var(--spacing-xl);
  text-shadow:0 0 10px rgba(0, 0, 0, 0.1);
}

.calculator-prompt {
  text-shadow:0 2px 10px rgba(0, 0, 0, 0.15);
  margin-bottom: var(--spacing-2xl);

  .prompt-text {
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--gray-900);
    margin-right: var(--spacing-sm);
  }
  .input-group {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-sm);
    margin-top: var(--spacing-md);
    
    input[type="number"] {
      width: 100px;
      padding: var(--spacing-sm) var(--spacing-md);
      border-radius: 8px;
      border: none;
      background: var(--gray-50);
      font-size: 1.5rem;
      font-weight: 700;
      text-align: center;
      color: var(--primary-700);
      box-shadow:0 4px 4px 4px  rgba(0, 0, 0, 0.25);

      &:focus {
        outline: 2px solid var(--primary);
        border-color: var(--primary);
      }
    }
    .time-unit {
      font-size: 1.2rem;
      color: var(--gray-800);
      margin-left: var(--spacing-sm);
    }
  }

  // --- Slider Styling ---
  .slider {
    -webkit-appearance: none;
    appearance: none;
    width: 100%;
    max-width: 400px;
    margin-top: var(--spacing-lg);
    cursor: pointer;
    background: transparent;
    
    // Track Styling
    &::-webkit-slider-runnable-track {
      height: 10px;
      border-radius: 5px;
      background: linear-gradient(to right, var(--primary) var(--slider-progress, 0%), var(--gray-300) var(--slider-progress, 0%));
    }
    &::-moz-range-track {
      height: 10px;
      border-radius: 5px;
      background: linear-gradient(to right, var(--primary) var(--slider-progress, 0%), var(--gray-300) var(--slider-progress, 0%));
    }
    
    // Thumb Styling
    &::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      margin-top: -5px; // Center vertically
      height: 20px;
      width: 20px;
      border-radius: 50%;
      background: var(--gray-50);
      border: 3px solid var(--primary);

    cursor: pointer;

    }
    &::-moz-range-thumb {
      height: 20px;
      width: 20px;
      border-radius: 50%;
      background: var(--gray-50);
      border: 3px solid var(--primary);
      box-shadow: 0 0 5px rgba(0,0,0,0.2);
    }
  }
}

.comparison-grid {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: var(--spacing-xl);
}

.price-card {
  flex: 1 1 320px;
  max-width: 380px;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-lg);
  padding: var(--spacing-lg);
  border-radius: 1rem;
  background: var(--gray-100);

  .card-header {
    margin: calc(var(--spacing-lg) * -1);
    padding:var(--spacing-md);
    margin-bottom: 0;;
    border-radius: 1rem 1rem 0 0;
    box-shadow:
        inset 0 4px 8px #ffffff30,
        0 10px 10px #00000030;
    height:75px;
    display: flex;
    justify-content:center;
    align-items:center;
    
    h3 {
      color: var(--bodyTextColorWhite);
      font-size: 1.3rem;
      font-weight: 600;
      margin:0;
    }
  }

  .price-display {
    width:fit-content;
    margin:auto;
    .context-container{
        display:flex;
        justify-content: space-between;
    }
    .time-breakdown,
    .price-context {
      font-size: 0.9rem;
      color: var(--gray-500);
      margin:0;
    }
    .price-context{
        font-weight: 800;
    }
    .price-value {
      display: block;
      font-size: 3rem;
      font-weight: 900;
      line-height: 1.1;
      margin: var(--spacing-xs) 0;
      text-shadow: 0 8px 5px rgba(0, 0, 0, 0.15);
    }
  }

  .features-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
    text-align: left;
    opacity:0.8;

    li {
      display: flex;
      align-items: center;
      gap: var(--spacing-sm);
      color: var(--gray-600);
    }
    .icon {
        font-size: 1.2rem;
        flex-shrink: 0;
    }
  }
}

.our-card {
  background: var(--gray-50);
  transform: translateY(-10px);
  box-shadow: 
    inset 0 2px 4px rgba(255, 255, 255, 0.7),
    0 15px 35px rgba(0, 0, 0, 0.35);

  .card-header {
    background: var(--primary);
  }
  .price-display .price-value {
    color: var(--primary-700);
  }
  .money-saved {
    font-weight: 700;
    color: #16a34a; // Green
  }
  .icon.check {
    color: #16a34a;
  }
  .cta {
    margin-top: auto;
    padding: var(--spacing-md);
    border-radius: 8px;
    border: none;
    background: var(--secondary);
    color: var(--bodyTextColorWhite);
    font-size: .9rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    
    &:hover {
        background: var(--secondary-600);
        transform: translateY(-3px);
    }

   
  }
}
.cta-secondary {
    display: block;
    /* Remove: background: none; */
    max-width: 300px;
    margin: auto;
    margin-top: 3em;
    padding: var(--spacing-sm);
    color: var(--secondary-400);
    border: 2px solid var(--secondary-400);
    background-color: var(--gray-200);  /* This will now work */
    border-radius: 12px;
    transition: all 100ms ease-out;
    cursor:pointer;
    box-shadow:0 4px 8px rgba(0, 0, 0, 0.3);

    &:hover {
        background-color: var(--secondary-400);
        color: var(--gray-300);
    }
}

.competitor-card {
    padding-bottom:100px;
    background: var(--gray-100);
    box-shadow:
    inset 0 0 10px 5px rgba(0, 0, 0, 0.15),
    0 8px 20px rgba(0, 0, 0, 0.12)
    ;
  
  .card-header {
    background: var(--gray-600);
  }
  .price-display .price-value {
    color: var(--gray-800);
  }
  .money-lost {
    font-weight: 700;
    color: var(--danger);
  }

  .unfeature {
    color: var(--gray-500);
    text-decoration: line-through;
  }
  .icon.cross {
    color: var(--danger);
  }
}

@media (max-width: 768px) {
    #pricing-calculator {
        padding-top: 80px;
    }
    .wave-separator svg {
        height: 100px;
    }
    .comparison-grid {
        gap: var(--spacing-lg);
    }
}
</style>