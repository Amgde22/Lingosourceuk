---
import { t } from "i18n:astro";
import clientData from "@data/client.json"
import Email from "@icons/email.svg"

import contactImageFullQuality from "@assets/images/contact-100.webp" 
import contactImageMiddleQuality from "@assets/images/contact-75.webp" 
import contactImageHalfQuality from "@assets/images/contact-50.webp" 

const {email, phoneForTel , phoneFormatted} = clientData
---

<section id="contact-1441">
    <div class="cs-container">
        <div class="cs-content">
            <h1 class="cs-intro">{t('home:contact.intro')}</h1>
            <h2 class="cs-title">{t('home:contact.title')}</h2>
        </div>
        <div class="cs-contact-group">
            <ul class="cs-ul">
                <li class="cs-li">
                    <picture class="cs-icon-wrapper">
                        <img aria-hidden="true" src="https://csimg.nyc3.cdn.digitaloceanspaces.com/Icons/phone-yellow.svg" alt="{t('home:contact.phoneNumber')} icon" class="cs-icon" width="40" height="40" decoding="async">
                    </picture>
                    <div class="cs-flex-group">
                        <span class="cs-header">{t('home:contact.phoneNumber')}</span>
                        <a href={`tel:${phoneForTel}`} class="cs-link">{phoneFormatted}</a>
                    </div>
                </li>
                <li class="cs-li">
                    <picture class="cs-icon-wrapper">
                        <Email stroke={"#ffd570"} />
                    </picture>
                    <div class="cs-flex-group">
                        <span class="cs-header">{t('home:contact.email')}</span>
                        <a href={`mailto:${email}`} class="cs-link">{email}</a>
                    </div>
                </li>
            </ul>
            <picture class="cs-background">
                <!--Mobile Image-->
                <source media="(max-width: 600px)" srcset={contactImageHalfQuality.src}>
                <!--Tablet Image-->
                <source media="(min-width: 601px) and (max-width: 1023px)" srcset={contactImageMiddleQuality.src}>
                <!--Desktop and above Image-->
                <source media="(min-width: 1024px)" srcset={contactImageFullQuality.src}>
                <img loading="lazy" decoding="async" src={contactImageFullQuality.src} alt="wind turbine" width="650" height="613">
            </picture>
        </div>
        <!--Form-->
        <form class="cs-form" id="cs-form-1441" name="Contact Form" method="post" data-netlify="true" netlify-honeypot="bot-field">
            <!-- Hidden fields for Netlify -->
            <input type="hidden" name="form-name" value="Contact Form" />
            <p class="hidden">
                <label>
                    Don't fill this out if you're human: <input name="bot-field" />
                </label>
            </p>
            
            <!-- Success Message -->
            <div class="cs-success-message" id="success-message">
                <svg class="cs-success-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                    <polyline points="22 4 12 14.01 9 11.01"></polyline>
                </svg>
                <h3 class="cs-success-title">{t('home:contact.successTitle') || 'Message Sent!'}</h3>
                <p class="cs-success-text">{t('home:contact.successMessage') || 'Thank you for contacting us. We\'ll get back to you soon.'}</p>
            </div>

            <!-- Error Message -->
            <div class="cs-error-message" id="error-message">
                <p>{t('home:contact.errorMessage') || 'Something went wrong. Please try again.'}</p>
            </div>

            <label class="cs-label">
                {t('home:contact.customerName')}
                <input class="cs-input" required type="text" id="name-1441" name="name" placeholder={t('home:contact.customerName')}>
            </label>
            <label class="cs-label cs-email">
                {t('home:contact.email')}
                <input class="cs-input" required type="email" id="email-1441" name="email" placeholder="contact@domain.com">
            </label>
            <label class="cs-label cs-phone">
                {t('home:contact.phoneNumber')}
                <input class="cs-input" required type="tel" id="phone-1441" name="phone" placeholder={t('home:contact.phoneNumber')}>
            </label>
            <label class="cs-label">
                {t('home:contact.message')}
                <textarea class="cs-input cs-textarea" required name="Message" id="message-1441" placeholder={t('home:contact.message')}></textarea>
            </label>
            <button class="cs-button-solid cs-submit" type="submit">{t('home:contact.sendButton') || 'Send Message'}</button>
        </form>
    </div>
</section>

<script>
    const form = document.getElementById('cs-form-1441') as HTMLFormElement;
    const successMessage = document.getElementById('success-message') as HTMLElement;
    const errorMessage = document.getElementById('error-message') as HTMLElement;

    if (form) {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = new FormData(form);
            const submitButton = form.querySelector('.cs-submit') as HTMLButtonElement;
            
            // Store original button text
            const originalButtonText = submitButton?.textContent || 'Send Message';
            
            // Disable submit button and show loading state
            if (submitButton) {
                submitButton.disabled = true;
                submitButton.textContent = 'Sending...';
            }

            // Hide any previous messages
            successMessage?.classList.remove('show');
            errorMessage?.classList.remove('show');

            try {
                const response = await fetch('/', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams(formData as any).toString()
                });

                if (response.ok) {
                    // Show success message
                    successMessage?.classList.add('show');
                    form.reset();
                    
                    // Scroll to success message
                    successMessage?.scrollIntoView({ behavior: 'smooth', block: 'center' });
                } else {
                    throw new Error('Form submission failed');
                }
            } catch (error) {
                // Show error message
                errorMessage?.classList.add('show');
                console.error('Form submission error:', error);
            } finally {
                // Re-enable submit button with original text
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.textContent = originalButtonText;
                }
            }
        });
    }
</script>

<style lang="less" scoped>
    /*-- -------------------------- -->
<---          Contact           -->
<--- -------------------------- -*/

/* Mobile - 360px */
@media only screen and (min-width: 0rem) {
    #contact-1441 {
        font-size: 16px;
        padding: 1rem;
        background-color: #f7f7f7;
        position: relative;
        z-index: 1;
        padding:  5em 1em;
        
        .cs-container {
            width: 100%;
            /* changes to 1280px at tablet */
            max-width: (584/16rem);
            margin: auto;
            display: flex;
            justify-content: center;
            align-items: stretch;
            flex-direction: column;
            column-gap: auto;
            /* 48px - 64px */
            row-gap: clamp(2rem, 3vw, 3rem);
            column-gap: (20/16rem);
            position: relative;
        }

        .cs-content {
            /* set text align to left if content needs to be left aligned */
            text-align: center;
            width: 100%;
            display: flex;
            flex-direction: column;
            /* centers content horizontally, set to flex-start to left align */
            align-items: center;
            margin-bottom:1.5em;
        }

        .cs-intro {
            font-size: 1.3rem;
            font-weight: 500;
            color:var(--primary-600);
        }
        .cs-title {
            font-size: 1.5rem;

            margin: 0;
            text-transform:capitalize;
        }

        .cs-text {
            color: #E8E8E8;
        }

        .cs-contact-group {
            width: 100%;
            max-width: (650/16rem);
            min-height: (500/16rem);
            /* 24px - 32px */
            padding: clamp(1.5rem, 2.5vw, 2rem);
            padding-top: (150/16rem);
            /* prevents padding from affecting height and width */
            box-sizing: border-box;
            border-radius: (24/16rem);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            gap: (32/16rem);
            /* sends it to the bottom in the 3rd position */
            order: 3;
            position: relative;
            z-index: 1;
        }

        .cs-ul {
            text-align: left;
            width: 100%;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            display: flex;
            flex-wrap: wrap;
            align-items: flex-start;
            gap: (24/16rem);
            position: relative;
        }

        .cs-li {
            list-style: none;
            display: flex;
            justify-content: flex-start;
            align-items: flex-start;
            gap: (20/16rem);

            &:hover {
                .cs-icon-wrapper {
                    transform: scale(1.1);
                }
            }
        }

        .cs-header {
            font-size: (20/16rem);
            font-weight: 700;
            line-height: 1.2em;
            margin-bottom: (12/16rem);
            color: var(--bodyTextColorWhite);
            display: block;
            text-transform: capitalize;
        }

        .cs-link {
            font-size: (16/16rem);
            line-height: 1.5em;
            text-decoration: none;
            color: var(--bodyTextColorWhite);
            opacity: .8;
            display: block;
            position: relative;

            &:hover {
                text-decoration: underline;
            }
        }

        .cs-icon-wrapper {
            width: (60/16rem);
            height: (60/16rem);
            margin: 0;
            border-radius: 50%;
            border: 1px solid var(--secondary);
            display: flex;
            justify-content: center;
            align-items: center;
            /* prevents flexbox from squishing it */
            flex: none;
            transition: transform .3s;
            display:none;

            @media(min-width:780px){
                display:flex;

            }
        }

        .cs-icon {
            width: (24/16rem);
            height: auto;
            display: block;
        }

        .cs-background {
            width: 100%;
            height: 100%;
            display: block;
            position: absolute;
            top: 0;
            left: 0;
            z-index: -1;

            &:before {
                /* background color overlay */
                content: '';
                position: absolute;
                display: block;
                height: 100%;
                width: 100%;
                background: linear-gradient(0deg, rgba(26, 26, 26, 0.94) 13.99%, rgba(26, 26, 26, 0.00) 79.31%);
                top: 0;
                left: 0;
                z-index: 1;
            }

            img {
                position: absolute;
                top: 0;
                left: 0;
                height: 100%;
                width: 100%;
                /* Makes img tag act as a background image */
                object-fit: cover;
            }
        }

        .hidden {
            display: none;
        }

        .cs-form {
            width: 100%;
            max-width: (630/16rem);
            /* 24px - 48px top and bottom */
            /* 16px - 48px left and right */
            padding: clamp(1.5rem, 5.18vw, 3rem) clamp(1rem, 4vw, 3rem);
            /* prevents flexbox from affecting height and width */
            box-sizing: border-box;
            background-color: #fff;
            border-radius: (24/16rem);
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
            align-items: center;
            gap: (12/16rem);
            position: relative;
        }

        .cs-success-message,
        .cs-error-message {
            width: 100%;
            padding: (24/16rem);
            border-radius: (12/16rem);
            text-align: center;
            display: none;
            flex-direction: column;
            align-items: center;
            gap: (12/16rem);
            animation: slideDown 0.4s ease-out;
            text-transform:capitalize;

            &.show {
                display: flex;
            }
        }

        .cs-success-message {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        .cs-success-icon {
            width: (48/16rem);
            height: (48/16rem);
            color: #28a745;
        }

        .cs-success-title {
            font-size: (24/16rem);
            font-weight: 700;
            margin: 0;
            color: #155724;
        }

        .cs-success-text {
            font-size: (16/16rem);
            margin: 0;
            color: #155724;
        }

        .cs-error-message {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;

            p {
                margin: 0;
                font-size: (16/16rem);
            }
        }

        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .cs-label {
            /* 14px - 16px */
            font-size: clamp(.875rem, 1.5vw, 1rem);
            width: 100%;
            color: var(--headerColor);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: flex-start;
            gap: (4/16rem);
        }

        .cs-input {
            font-size: (16/16rem);
            width: 100%;
            height: (56/16rem);
            padding: 0;
            padding-left: (24/16rem);
            color: var(--headerColor);
            background-color: #F7F7F7;
            border-radius: (8/16rem);
            border: none;
            /* prevents padding from adding to height and width */
            box-sizing: border-box;
            &::placeholder {
                color: #7D799C;
                opacity: .6;
            }
        }

        .cs-textarea {
            min-height: (120/16rem);
            padding-top: (24/16rem);
            margin-bottom: (12/16rem);
            font-family: inherit;
        }

        .cs-button-solid {
            font-size: (16/16rem);
            line-height: (56/16rem);
            text-decoration: none;
	    	font-weight: 700;
            overflow: hidden;
            margin: 0;
            color: #fff;
            padding: 0 (48/16rem);
            border-radius: (8/16rem);
            background-color: var(--primary);
            display: inline-block;
            position: relative;
            z-index: 1;
            transition: color .3s;

            &:before {
                content: '';
                position: absolute;
                display: block;
                height: 100%;
                width: 0%;
                background: #1a1a1a;
                opacity: 1;
                top: 0;
                left: 0;
                z-index: -1;
                transition: width .3s;
            }

            &:hover {
                color: var(--primary);
                &:before {
                    width: 100%;
                }
            }
        }

        .cs-submit {
            width: 100%;
            min-width: (200/16rem);
            border: none;

            &:hover {
                color: #fff;
                cursor: pointer;
            }

            &:disabled {
                opacity: 0.6;
                cursor: not-allowed;
            }
        }
    }
}

/* Tablet - 768px */
@media only screen and (min-width: 48rem) {
    #contact-1441 {
        .cs-container {
            max-width: (1280/16rem);
            flex-direction: row;

            flex-wrap: wrap;
            padding: 3rem 0 ;
        }

        .cs-content {
            width: 100%;
            /* prevents flexbox from squishing it */
            flex: none;
        }

        .cs-contact-group {
            width: 50vw;
            order: 2;
        }

        .cs-form {
            width: 45%;
            max-width: (542/16rem);
            order: 3;
        }

        .cs-submit {
            width: auto;
        }
    }
}
</style>