---
import {phoneForTel} from "@data/client.json"
import navData from "@data/navData";
import { Icon } from "astro-icon/components";
import { getLocalePath, t } from "i18n:astro";
import Settings from "./TemplateComponents/Settings.astro";
---

<!-- ============================================ --><!--                 Navigation                   --><!-- ============================================ -->
<header id="cs-navigation">
  <div class="cs-container">
    <!--Nav Logo-->
    <a href={getLocalePath("/")} class="cs-logo" aria-label="back to home">
      <img
        src="/assets/images/logo.png"
        alt="logo"
        width="210"
        height="29"
        aria-hidden="true"
        decoding="async"
      />
    </a>

    <a href={"tel:"+phoneForTel} class="call-btn" >
      <svg class="call-btn-icon"  xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><g fill="none" fill-rule="evenodd"><path d="m12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035q-.016-.005-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427q-.004-.016-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093q.019.005.029-.008l.004-.014l-.034-.614q-.005-.018-.02-.022m-.715.002a.02.02 0 0 0-.027.006l-.006.014l-.034.614q.001.018.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z"/><path fill="currentColor" d="M16.552 22.133c-1.44-.053-5.521-.617-9.795-4.89c-4.273-4.274-4.836-8.354-4.89-9.795c-.08-2.196 1.602-4.329 3.545-5.162a1.47 1.47 0 0 1 1.445.159c1.6 1.166 2.704 2.93 3.652 4.317a1.504 1.504 0 0 1-.256 1.986l-1.951 1.449a.48.48 0 0 0-.142.616c.442.803 1.228 1.999 2.128 2.899s2.153 1.738 3.012 2.23a.483.483 0 0 0 .644-.162l1.27-1.933a1.503 1.503 0 0 1 2.056-.332c1.407.974 3.049 2.059 4.251 3.598a1.47 1.47 0 0 1 .189 1.485c-.837 1.953-2.955 3.616-5.158 3.535"/></g></svg>
      {t("home:header.callBtn")}
    </a>


    <!--Navigation List-->
    <nav class="cs-nav" role="navigation">
      <!--Mobile Nav Toggle-->
      <button
        class="cs-toggle"
        id="mobile-menu-toggle"
        aria-expanded="false"
        aria-controls="cs-expanded-ul"
        aria-label="mobile menu toggle"
      >
        <div class="cs-box" aria-hidden="true">
          <span class="cs-line cs-line1" aria-hidden="true"></span>
          <span class="cs-line cs-line2" aria-hidden="true"></span>
          <span class="cs-line cs-line3" aria-hidden="true"></span>
        </div>
      </button>
      <!-- We need a wrapper div so we can set a fixed height on the cs-ul in case the nav list gets too long from too many dropdowns being opened and needs to have an overflow scroll. This wrapper acts as the background so it can go the full height of the screen and not cut off any overflowing nav items while the cs-ul stops short of the bottom of the screen, which keeps all nav items in view no matter how mnay there are-->
      <!-- This also allows for easy substitution of CodeStitch navigations. Just replace the .cs-ul-wrapper in the new navigation with this one -->
      <div class="cs-ul-wrapper">
        <ul id="cs-expanded-ul" class="cs-ul">
          <!-- Note: `:any` is solely used to stop the TypeScript warnings. It's an upstream issue with the i18n package which does not impact the code. -->
          {
            navData.map((entry: any) => (
              <li
                class:list={[
                  "cs-li",
                  { "cs-dropdown": entry.children?.length > 0 },
                ]}
              >
                {entry.children?.length > 0 ? (
                  // If entry has children in navData.json, create a button and a dropdown icon
                  <button
                    aria-expanded="false"
                    aria-controls={`submenu-${entry.key}`}
                    class:list={[
                      "cs-li-link cs-dropdown-button",
                      { "cs-active": Astro.url.pathname.includes(entry.url) },
                    ]}
                  >
                    {t(entry.key)}
                    <Icon name="mdi--caret" class="cs-drop-icon" />
                  </button>
                ) : (
                    (entry.special?
                    <a href={getLocalePath(entry.url)} class="special-link">
                      {t(entry.key)}
                      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12m13-2a1 1 0 0 0-1-1h-4a1 1 0 1 0 0 2h3v3a1 1 0 1 0 2 0z" clip-rule="evenodd"/></svg>
                    </a>
                    :
                  <a
                    href={getLocalePath(entry.url)}
                    class:list={[
                      "cs-li-link",
                      {
                        "cs-active":
                          Astro.url.pathname === getLocalePath(entry.url),
                      },
                    ]}
                    aria-current={
                      Astro.url.pathname === getLocalePath(entry.url)
                        ? "page"
                        : undefined
                    }
                  >
                    {t(entry.key)}
                  </a>
                  )
                )}

                {entry.children?.length > 0 && (
                  // If entry has children in navData.json, create a drop down menu
                  <ul id={`submenu-${entry.key}`} class="cs-drop-ul">
                    {entry.children.map((child: any) => (
                      <li class="cs-drop-li">
                        <a
                          href={getLocalePath(child.url)}
                          class="cs-li-link cs-drop-link"
                          aria-current={
                            Astro.url.pathname === getLocalePath(child.url)
                              ? "page"
                              : undefined
                          }
                        >
                          {t(child.key)}
                        </a>
                      </li>
                    ))}
                  </ul>
                )}
              </li>
            ))
          }
        </ul>
        
        <!-- shown on mobile menu by default  -->
        <div class="cs-shown cs-settings">
          <Settings />
        </div>
      </div>
    </nav>

    <!-- shown on desktop menu by default  -->
    <div class="cs-hidden cs-settings">
      <Settings />
    </div>


  </div>
</header>

<style lang="less">
  /*-- -------------------------- -->
<---     Mobile Navigation      -->
<--- -------------------------- -*/
  .call-btn,.special-link{
    width:fit-content;
    color:white;
    background-color: var(--primary-500);
    display:flex;
    align-items:center;
    font-size:0.7rem;
    padding:.5rem .8rem;
    gap:.5em;
    font-weight: 800;
    border-radius:100vw;
    border:none;
    height:min-content;

    @media(max-width:720px){
      margin-left:auto;
    }
    &:hover{
      background-color: var(--primary-600);
    }

    & .call-btn-icon{

      width:1.4em;
      height:1.4em;
    }
  }
    .call-btn{
      display:none;
    }
  /* Mobile - 1023px */
  @media only screen and (max-width: 63.9375rem) {
    body {
      &.cs-open {
        overflow: hidden;
      }
    }

    #cs-navigation {
      /* remove the font family so the Stitch inherits the fonts from your global stylesheet */
      font-family: "Roboto", "Arial", sans-serif;
      width: 100%;
      /* prevents padding from affecting height and width */
      box-sizing: border-box;
      padding: (8/16rem) (16/16rem);
      background-color: color-mix(in srgb, var(--gray-100) , transparent 10%);
      backdrop-filter: blur(10px);
      box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;
      position: fixed;
      z-index: 10000;

      &:before {
        /* black blurred overlay */
        content: "";
        width: 0%;
        height: 100vh;
        background: rgba(0, 0, 0, 0.6);
        opacity: 0;
        display: block;
        position: absolute;
        top: 100%;
        right: 0;
        z-index: -11;
        transition:
          width 0.5s,
          opacity 0.3s;
        -webkit-backdrop-filter: blur(10px);
        backdrop-filter: blur(10px);
      }

      &.cs-active {
        &:before {
          width: 100%;
          opacity: 1;
        }

        .cs-ul-wrapper {
          opacity: 1;
          visibility: visible;
          transform: scaleX(1);
          transition-delay: 0.2s;
        }

        .cs-li {
          opacity: 1;
          transform: translateX(0);
        }
      }

      .cs-container {
        width: 100%;
        display: flex;
        justify-content: flex-end;
        align-items: center;
      }

      .cs-logo {
        width: 40%;
        max-width: (146/16rem);
        height: 100%;
        margin: 0 auto 0 0;
        /* prevents padding from affecting height and width */
        box-sizing: border-box;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10;

        img {
          width: 100%;
          height: 100%;
          /* ensures the image never overflows the container. It stays contained within it's width and height and expands to fill it then stops once it reaches an edge */
          object-fit: contain;
          /* places the image to the left edge of the parent */
          object-position: left;
        }
      }

      .cs-toggle {
        /* 44px - 48px */
        width: clamp(2.75rem, 6vw, 3rem);
        height: clamp(2.75rem, 6vw, 3rem);
        margin: 0 0 0 auto;
        background-color: transparent;
        border: none;
        border-radius: (4/16rem);
        display: flex;
        justify-content: center;
        align-items: center;
        &.cs-active {
          .select-wrapper {
            display: flex;
          }
        }
      }

      .cs-active {
        .cs-line1 {
          top: 50%;
          transform: translate(-50%, -50%) rotate(225deg);
        }

        .cs-line2 {
          top: 50%;
          transform: translate(-50%, -50%) translateY(0) rotate(-225deg);
          transform-origin: center;
        }

        .cs-line3 {
          opacity: 0;
          bottom: 100%;
        }
      }

      .cs-box {
        /* 24px - 28px */
        width: clamp(1.5rem, 2vw, 1.75rem);
        /* 14px - 16px */
        height: clamp(0.875rem, 1.5vw, 1rem);
        position: relative;
      }

      .cs-line {
        width: 100%;
        height: 2px;
        background-color: #1a1a1a;
        border-radius: 2px;
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
      }

      .cs-line1 {
        top: 0;
        transition:
          transform 0.5s,
          top 0.3s,
          left 0.3s;
        animation-duration: 0.7s;
        animation-timing-function: ease;
        animation-direction: normal;
        animation-fill-mode: forwards;
        transform-origin: center;
      }

      .cs-line2 {
        top: 50%;
        transform: translateX(-50%) translateY(-50%);
        transition:
          top 0.3s,
          left 0.3s,
          transform 0.5s;
        animation-duration: 0.7s;
        animation-timing-function: ease;
        animation-direction: normal;
        animation-fill-mode: forwards;
      }

      .cs-line3 {
        bottom: 0;
        transition:
          bottom 0.3s,
          opacity 0.3s;
      }

      .cs-ul-wrapper {
        height: 100vh;
        background-color: #fff;
        box-shadow: inset rgba(0, 0, 0, 0.2) 0px 8px 24px;
        opacity: 0;
        visibility: hidden;
        position: absolute;
        top: 100%;
        right: 0;
        left: auto;
        z-index: -1;
        overflow: hidden;
        transform: scaleX(0);
        transition:
          transform 0.4s,
          opacity 0.3s;
        transform-origin: top right;
        padding: (48/16rem) clamp(1.75rem, 3vw, 2.5rem) (32/16rem) (70/16rem);
        display: grid;
        gap: clamp(1.25rem, 2.6vw, 2.25rem);
      }

      .cs-ul {
        width: auto;
        min-width: 40%;
        // height: 65vh;
        margin: 0;
        /* 28px - 40px */
        // padding: (48/16rem) clamp(1.75rem, 3vw, 2.5rem) (32/16rem) (70/16rem);
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-end;
        gap: (20/16rem);
        overflow: scroll;
      }

      .cs-li {
        text-align: right;
        list-style: none;
        width: 100%;
        margin-right: 0;
        opacity: 0;
        /* transition from these values */
        transform: translateX(-40/16rem);
        transition:
          transform 0.6s,
          opacity 0.9s;

        &:nth-of-type(1) {
          transition-delay: 0.05s;
        }
        &:nth-of-type(2) {
          transition-delay: 0.1s;
        }
        &:nth-of-type(3) {
          transition-delay: 0.15s;
        }
        &:nth-of-type(4) {
          transition-delay: 0.2s;
        }
        &:nth-of-type(5) {
          transition-delay: 0.25s;
        }
        &:nth-of-type(6) {
          transition-delay: 0.3s;
        }
        &:nth-of-type(7) {
          transition-delay: 0.35s;
        }
        &:nth-of-type(8) {
          transition-delay: 0.4s;
        }
        &:nth-of-type(9) {
          transition-delay: 0.45s;
        }
      }

      .cs-li-link {
        /* 16px - 24px */
        font-size: clamp(1rem, 2.5vw, 1.5rem);
        color: inherit;
        line-height: 1.2em;
        text-decoration: none;
        margin: 0;
        display: inline-block;
        position: relative;

        &:before {
          /* active state underline */
          content: "";
          width: 100%;
          height: 1px;
          background: currentColor;
          opacity: 1;
          display: none;
          position: absolute;
          bottom: (-2/16rem);
          left: 0;
        }

        &.cs-active {
          &:before {
            display: block;
          }
        }

        /* styles these li items that are also dropdown buttons */
        &.cs-dropdown-button {
          display: flex;
          align-items: center;
          margin-left: auto;
          gap: 0.5em;

           
        }
      }
      .cs-drop-link{
            text-decoration:underline;
           }

      .cs-button-solid {
        display: none;
      }
    }
  }

  /* Dark Mode */
  @media only screen and (max-width: 63.9375rem) {
    body.dark-mode {
      #cs-navigation {
        background-color: var(--dark);

        .cs-logo {
          /* makes it white */
          filter: grayscale(1) brightness(1000%);
        }

        .cs-line {
          background-color: #fff;
        }

        .cs-ul-wrapper {
          background-color: var(--medium);
        }

        .cs-li-link {
          color: var(--bodyTextColorWhite);
        }
      }
    }
  }

  /*-- -------------------------- -->
<---     Navigation Dropdown    -->
<--- -------------------------- -*/

  /* Mobile - 1023px */
  @media only screen and (max-width: 63.9375rem) {
    #cs-navigation {
      .cs-dropdown {
        color: var(--bodyTextColorWhite);
        color: var(--headerColor);

        position: relative;

        &.cs-active {
          .cs-drop-ul {
            height: auto;
            margin: (12/16rem) 0 0 0;
            padding: (24/16rem);
            opacity: 1;
            visibility: visible;
            transform: scale(1);
          }

          .cs-drop-link {
            opacity: 1;
          }

          .cs-drop-icon {
            transform: rotate(0);
          }
        }

        .cs-li-link {
          position: relative;
          transition: opacity 0.3s;
        }
      }

      .cs-drop-icon {
        width: (15/16rem);
        height: auto;
        display: inline-block;
        color: inherit;
        transform: rotate(180deg);
        transition: 0.3s;
      }

      .cs-drop-ul {
        width: 100%;
        height: 0;
        margin: 0;
        box-sizing: border-box;
        padding: 0 (24/16rem) 0 (24/16rem);
        background-color: var(--primary);
        opacity: 0;
        display: flex;
        visibility: hidden;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-end;
        gap: (12/16rem);
        overflow: hidden;
        transform: scale(0);
        transition:
          padding 0.3s,
          margin 0.3s,
          height 0.3s,
          opacity 0.3s,
          transform 0.3s,
          visibility 0.3s;
        transform-origin: top right;
      }

      .cs-drop-li {
        text-align: inherit;
        list-style: none;
      }

      .cs-li-link {
        &.cs-drop-link {
          /* 14px - 16px */
          font-size: clamp(0.875rem, 2vw, 1.25rem);
          /* UPDATED: Changed from 'inherit' to 'white' */
          color: white;
        }
      }

      .cs-dropdown-button {
        background-color: transparent;
        border: none;
        appearance: none;
      }
    }
  }

  /* Desktop - 1024px */
  @media only screen and (min-width: 64rem) {
    #cs-navigation {
      .cs-dropdown {
        position: relative;
        &:hover,
        &.cs-active {
          cursor: pointer;
          .cs-drop-ul {
            opacity: 1;
            visibility: visible;
            transform: scaleY(1);
          }

          .cs-drop-li {
            opacity: 1;
            transform: translateY(0);
          }
        }
      }

      .cs-dropdown:has(.cs-drop-icon) {
        display: flex;
        align-items: center;
        &:hover {
          .cs-drop-icon {
            transform: rotate(0);
          }
        }
      }

      .cs-drop-icon {
        width: (15/16rem);
        height: auto;
        display: inline-block;
        color: inherit;
        transform: rotate(180deg);
        transition: 0.3s;
      }

      .cs-drop-ul {
        min-width: (200/16rem);
        margin: 0;
        padding: 0;
        background-color: #fff;
        box-shadow: rgba(149, 157, 165, 0.2) 0px 10px 16px;
        opacity: 0;
        border-bottom: 5px solid var(--primary);
        visibility: hidden;
        /* if you have 8 or more links in your dropdown nav, uncomment the columns property to make the list into 2 even columns. Change it to 3 or 4 if you need extra columns. Then remove the transition delays on the cs-drop-li so they don't have weird scattered animations */
        // columns: 2;
        position: absolute;
        top: 100%;
        z-index: -100;
        overflow: hidden;
        transform: scaleY(0);
        transition:
          transform 0.3s,
          visibility 0.3s,
          opacity 0.3s;
        transform-origin: top;
      }

      .cs-drop-li {
        font-size: (16/16rem);
        text-decoration: none;
        list-style: none;
        width: 100%;
        height: auto;
        color: var(--bodyTextColor);
        opacity: 0;
        display: block;
        transform: translateY(-10/16rem);
        transition:
          opacity 0.6s,
          transform 0.6s;

        &:nth-of-type(1) {
          transition-delay: 0.05s;
        }
        &:nth-of-type(2) {
          transition-delay: 0.1s;
        }
        &:nth-of-type(3) {
          transition-delay: 0.15s;
        }
        &:nth-of-type(4) {
          transition-delay: 0.2s;
        }
        &:nth-of-type(5) {
          transition-delay: 0.25s;
        }
        &:nth-of-type(6) {
          transition-delay: 0.3s;
        }
        &:nth-of-type(7) {
          transition-delay: 0.35s;
        }
        &:nth-of-type(8) {
          transition-delay: 0.4s;
        }
        &:nth-of-type(9) {
          transition-delay: 0.45s;
        }
        &:nth-of-type(10) {
          transition-delay: 0.5s;
        }
        &:nth-of-type(11) {
          transition-delay: 0.55s;
        }
        &:nth-of-type(12) {
          transition-delay: 0.6s;
        }
        &:nth-of-type(13) {
          transition-delay: 0.65s;
        }
      }

      .cs-li-link {
        &.cs-drop-link {
          font-size: (16/16rem);
          line-height: 1.5em;
          text-decoration: none;
          white-space: nowrap;
          width: 100%;
          /* prevents padding from affecting height and width */
          box-sizing: border-box;
          padding: (12/16rem);
          color: var(--bodyTextColor);
          display: block;
          transition:
            color 0.3s,
            background-color 0.3s;

          &:hover {
            background-color: #f7f7f7;
          }

          &:focus-within {
            outline: 2px solid currentColor;
            outline-offset: -2px;
          }

          &:before {
            display: none;
          }
        }
      }

      .cs-dropdown-button {
        background-color: transparent;
        border: none;
        appearance: none;
      }
    }
  }

  /* Dark Mode */
  @media only screen and (min-width: 0rem) {
    body.dark-mode {
      #cs-navigation {
        .cs-drop-ul {
          background-color: var(--dark);
        }

        .cs-li-link {
          &.cs-drop-link {
            &:hover {
              background-color: var(--medium);
            }
          }
        }

        .cs-drop-icon {
          /* turns it white */
          filter: grayscale(1) brightness(1000%);
        }
      }
    }
  }

  /*-- -------------------------- -->
<---     Desktop Navigation     -->
<--- -------------------------- -*/

  /* Small Desktop - 1024px */
  @media only screen and (min-width: 64rem) {
    #cs-navigation {
      /* remove the font family so the Stitch inherits the fonts from your global stylesheet */
      font-family: "Roboto", "Arial", sans-serif;
      width: 100%;
      /* prevents padding from affecting height and width */
      box-sizing: border-box;
      padding: 0 (16/16rem);
      box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;
      background-color: color-mix(in srgb, var(--gray-100) , transparent 10%);

      backdrop-filter: blur(12px);
      position: fixed;
      z-index: 10000;

      .cs-container {
        width: 100%;
        max-width: (1280/16rem);
        margin: auto;
        display: flex;
        justify-content: flex-end;
        align-items: center;
        gap: (8/16rem);
      }

      .cs-toggle {
        display: none;
      }

      .cs-logo {
        width: 18.4%;
        max-width: (350/16rem);
        height: (65/16rem);
        /* margin-right auto pushes everything away from it to the right */
        margin: 0 auto 0 0;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 100;

        img {
          width: 100%;
          height: 100%;
          /* ensures the image never overflows the container. It stays contained within it's width and height and expands to fill it then stops once it reaches an edge */
          object-fit: contain;
        }
      }

      .cs-ul {
        width: 100%;
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: flex-start;
        align-items: center;
        /* 20px - 36px */
        gap: clamp(1rem, 2.6vw, 1.5rem);
        /* separator between cs-ul and darkmode toggle */
        &::after {
          content: "";
          height: 2rem;
          border-inline-end: 1px solid hsl(224, 6%, 77%);
        }
      }

      .cs-li {
        list-style: none;
        padding: (16/16rem) 0;
        /* prevent flexbox from squishing it */
        flex: none;
      }

      .cs-li-link {
        /* 14px - 16px */
        font-size: clamp(0.875rem, 1vw, 1rem);
        line-height: 1.5em;
        text-decoration: none;
        margin: 0;
        color: var(--bodyTextColor);
        display: block;
        position: relative;
        &:hover {
          &:before {
            width: 100%;
          }
        }

        &.cs-active {
          &:before {
            width: 100%;
          }
        }

        &:before {
          /* active state underline */
          content: "";
          width: 0%;
          height: 2px;
          background: var(--primary);
          opacity: 1;
          display: block;
          position: absolute;
          bottom: (0/16rem);
          left: 0;
          transition: width 0.3s;
        }

        &.cs-dropdown-button {
          display: flex;
          align-items: center;
          gap: 0.5em;
        }
      }

      .cs-settings {
        gap: 0.5rem;
      }

      .cs-settings.cs-hidden {
        display: flex;
      }

      .cs-settings.cs-shown {
        display: none;
      }
    }
  }

  /* Dark Mode */
  @media only screen and (min-width: 64rem) {
    body.dark-mode {
      #cs-navigation {
        background-color: var(--dark);

        .cs-logo {
          /* makes it turn white */
          filter: grayscale(1) brightness(1000%);
        }

        .cs-ul {
          /* separator between cs-ul and darkmode toggle */
          &::after {
            border-inline-end: 1px solid hsl(224, 10%, 23%);
          }
        }

        .cs-li-link {
          color: var(--bodyTextColorWhite);
        }

        .cs-li-link {
          &:before {
            background-color: var(--primaryLight);
          }
        }
      }
    }
  }
</style>