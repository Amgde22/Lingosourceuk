---
import { t } from "i18n:astro"
import { Icon } from "astro-icon/components"

const steps = t("CAS:howItWorks.steps", { returnObjects: true });
---

<section id="Call-answering-how-it-works">
  <h2 set:html={t("CAS:howItWorks.title")}></h2>

  <!-- Step Nav -->
  <div class="steps-nav-container">
    {steps.map((step, index) => (
      <>
        <div class={`step-nav-item step-nav-item-${index}`} data-step={index}>
          <button class="step-nav-btn" aria-hidden="true" tabindex="-1">
            {index + 1}
          </button>
          <p class="step-title">{step.title}</p>
        </div>
        {index < steps.length - 1 && <div class="step-line" data-line={index}></div>}
      </>
    ))}
  </div>
  

  <!-- Showcase -->
  <div class="step-showcase-container">
    <button class="prev-step-btn">
      <Icon class="rotate" name="chevron" />
    </button>
    <button class="next-step-btn">
      <Icon name="chevron" />
    </button>

    {steps.map((step, index) => (
      <div class="step-showcase-item" data-step={index}>

        <div class="icon-wrapper">
          {index === 0 && <Icon class="blob-bg" name="blob-1" />}
          {index === 1 && <Icon class="blob-bg" name="blob-2" />}
          {index === 2 && <Icon class="blob-bg" name="blob-3" />}
          <div class="icon">
            {index === 0 && <Icon name="clock" />} 
            {index === 1 && <Icon name="headset" />}
            {index === 2 && <Icon name="envelope" />}
          </div>
        </div>
        <div class="content">
          <h3 class="step-showcase-title">{index + 1}. {step.title}</h3>
          <p class="step-showcase-description">{step.description}</p>
          <div class="cta-container">
            <button onclick="openCalendlyDialog()" class="cta">
              {t("CAS:cta")}
            </button>
            <button onclick="openDemoBookingDialog()" class="cta-secondary">
              {t("CAS:ctaSecondary")}
            </button>
          </div>
        </div>
      </div>
    ))}
  </div>
</section>

<script>
  const container = document.querySelector("#Call-answering-how-it-works");
  const steps = container.querySelectorAll(".step-showcase-item");
  // UPDATED: Select the entire nav item, not just the button
  const navItems = container.querySelectorAll(".step-nav-item");
  const navBtns = container.querySelectorAll(".step-nav-btn"); // Still needed for styling
  const prevBtn = container.querySelector(".prev-step-btn");
  const nextBtn = container.querySelector(".next-step-btn");
  let current = 0;

  function showStep(index) {
    steps.forEach((step, i) => {
      step.classList.toggle("active", i === index);
      step.style.display = i === index ? "grid" : "none";
    });

    navBtns.forEach((btn, i) => {
      btn.classList.toggle("active", i === index);
      btn.classList.toggle("preactive", i < index);
    });

    const lines = container.querySelectorAll(".step-line");
    lines.forEach((line, i) => {
      line.classList.remove("active");
      if (index > i) {
        line.classList.add("active");
      }
    });

    current = index;
  }

  // UPDATED: Add click listener to the entire item
  navItems.forEach((item) => {
    item.addEventListener("click", () => {
      // Read the step index from the data attribute
      const stepIndex = parseInt(item.dataset.step, 10);
      showStep(stepIndex);
    });
  });

  nextBtn.addEventListener("click", () => {
    const next = (current + 1) % steps.length;
    showStep(next);
  });

  prevBtn.addEventListener("click", () => {
    const prev = (current - 1 + steps.length) % steps.length;
    showStep(prev);
  });

  // init
  showStep(0);

  // Intersection Observer for initial load animation
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        container.classList.add("is-visible");
        observer.unobserve(entry.target); // Animate only once
      }
    });
  }, {
    threshold: 0.1 // Trigger when 10% of the element is visible
  });

  observer.observe(container);

</script>

<style lang="less" scoped>
// --- Animation Delays ---
@delay-base: 100ms;
@delay-1: @delay-base * 1;
@delay-2: @delay-base * 2;
@delay-3: @delay-base * 3;
@delay-4: @delay-base * 4;
@delay-5: @delay-base * 5;
@delay-6: @delay-base * 6;
@delay-7: @delay-base * 7;
@delay-8: @delay-base * 8;


// --- Animation Keyframes ---
@keyframes slideDownFadeIn {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

#Call-answering-how-it-works {
  padding: var(--sectionPadding);
  padding-bottom:var(--spacing-lg);
  background: linear-gradient(
  to bottom, 
  color-mix(in srgb, var(--gray-300), white 30%), 
  var(--gray-300) 40%, 
  color-mix(in srgb, var(--gray-300), black 20%)
);

  color: var(--gray-800);
  position: relative;
  overflow-x: hidden; 
  
  h2,
  .step-nav-item,
  .step-line,
  .step-showcase-container {
    opacity: 0;
  }

  // --- Trigger Animation When Visible ---
  &.is-visible {
    h2,
    .step-nav-item,
    .step-line,
    .step-showcase-container {
      animation: slideDownFadeIn 0.6s ease-out forwards;
    }

    h2 { animation-delay: @delay-1; }
    .step-nav-item-0 { animation-delay: @delay-2; }
    .step-line[data-line="0"] { animation-delay: @delay-3; }
    .step-nav-item-1 { animation-delay: @delay-4; }
    .step-line[data-line="1"] { animation-delay: @delay-5; }
    .step-nav-item-2 { animation-delay: @delay-6; }
    .step-showcase-container { animation-delay: @delay-8; }
  }


  h2 {
    text-align: center;
    font-size: var(--headerFontSize);
    margin-bottom: var(--spacing-xl);
    color: var(--primary-700);
  }

  .steps-nav-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: var(--spacing-lg);
    margin-bottom: var(--spacing-2xl);
    position: relative;
    
    // ADDED: Max-width for large monitors
    max-width: 1024px;
    margin-left: auto;
    margin-right: auto;
    padding: 0 var(--spacing-md); // Add some padding for when it hits max-width


    .step-nav-item {
      text-align: center;
      position: relative;
      z-index: 2;
      // ADDED: Indicate the whole area is clickable
      cursor: pointer;

      .step-nav-btn {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        border: 2px solid var(--gray-600);
        background: var(--gray-400);
        color: var(--primary-800);
        font-weight: 900;
        font-size: 1.1rem;
        transition: all 0.3s;
        flex-shrink: 0; // Prevent button from shrinking in flexbox
        // Make button non-interactive to ensure parent click event fires cleanly
        pointer-events: none; 

        &.active {
          background: var(--primary);
          color: var(--bodyTextColorWhite);
          border-color: var(--primary-600);
        }
        &.preactive{
          background: color-mix(in srgb, var(--primary) , var(--gray-500) 25%);
          border-color:color-mix(in srgb, var(--primary) , var(--gray-500) 55%);
          color: var(--gray-300);
        }
      }

      .step-title {
        margin-top: var(--spacing-sm);
        font-size: 0.9rem;
        color: var(--gray-800);
        font-weight: 600;
      }
    }

    .step-line {
      flex: 1;
      height: 8px;
      background: var(--gray-500);
      position: relative;
      z-index: 1;
      overflow: hidden;

      &::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 0%;
        background: var(--primary);
        transition: width 0.2s ease;
        z-index: 2;
      }

      &.active::before {
        width: 100%;
      }
      &[data-line="0"]:not(.active)::before {
        transition-delay:0.2s;
      }
    }
  }


  .step-showcase-container {
    padding:1.5rem;
    position: relative;
    max-width:880px;
    margin:auto;
    display: flex;
    align-items: center;
    justify-content: center;

    .prev-step-btn,
    .next-step-btn {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: var(--gray-400);
      font-size: 2rem;
      cursor: pointer;
      transition: color 0.3s;
      z-index: 5;

      &:hover {
        color: var(--primary);
      }
    }

    .prev-step-btn {
      left: 0;
    }

    .next-step-btn {
      right: 0;
    }

    .rotate {
      transform: rotate(180deg);
    }

    .step-showcase-item {
      display: none; // Managed by JS
      grid-template-columns: 1fr 2fr;
      gap: var(--spacing-lg);
      align-items: center;
      max-width: 800px;
      padding: var(--spacing-xl);
      border-radius: 1rem;
      background: var(--gray-100);
      box-shadow: 
        inset 0 10px 25px color-mix(in srgb, var(--gray-300) , transparent 50%),
        0 10px 25px rgba(0, 0, 0, 0.2),
        0 20px 40px rgba(0, 0, 0, 0.1);
      
      // --- Step Content Animation Setup ---
      .icon-wrapper,
      .content > * {
        opacity: 0;
      }

      &.active {
        .icon-wrapper,
        .content > * {
          animation: slideDownFadeIn 0.5s ease-out forwards;
        }

        .icon-wrapper { animation-delay: @delay-1; }
        .content .step-showcase-title { animation-delay: @delay-2; }
        .content .step-showcase-description { animation-delay: @delay-3; }
        .content .cta-container { animation-delay: @delay-4; }
      }

      .icon-wrapper {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 1.25em 0;

        .blob-bg {
          position: absolute;
          width: 200px;

          height: auto;
          z-index: 1;
        }

        .icon {
          font-size: 4rem;
          color: var(--primary);
          z-index: 2;
          position: relative;
          transform: translate(-6%,10%);
        }
      }

      .content {
        .step-showcase-title {
          font-size: 1.3rem;
          font-weight: bold;
          margin-bottom: var(--spacing-sm);
          color: var(--primary);
        }
        .step-showcase-description {
          font-size:.9rem;
          color: var(--gray-500);
          margin-bottom: var(--spacing-lg);
        }
        .cta-container {
          display: flex;
          gap: var(--spacing-sm);
          flex-wrap: wrap;
          justify-content: flex-start;

          .cta , .cta-secondary {
            cursor: pointer;
            transition: background-color ease-in-out 300ms,
            color ease-in-out 300ms,
            outline-color ease-in-out 80ms,
            outline-offset 100ms ease-out ,
            transform ease-in-out 50ms,
            box-shadow ease-in-out 100ms;
            padding: 0.6rem 1rem;
            border-radius: 0.5rem;
          }

          .cta {
            background: var(--secondary);
            color: var(--bodyTextColorWhite);
            border: none;
            box-shadow: 0 5px 10px var(--secondaryLighter);

            &:hover {
              background: var(--secondary-600);
              transform:translateY(-3px);
              box-shadow: 0 10px 15px var(--secondaryLighter);
            }
          }

          .cta-secondary {
            background: transparent;
            outline: 2px solid var(--secondary);
            border:none;
            color: var(--secondary);

            &:hover {
              background: var(--secondaryLighter);
              color: var(--bodyTextColorWhite);
              outline-offset: 6px;
              outline-color: transparent;
            }
          }
        }
      }
    }
  }
}


// --- Mobile Responsive Styles ---
@media (max-width: 768px) {
  #Call-answering-how-it-works {
    padding: 3em 0; // Remove padding from the main container

    .steps-nav-container {
      padding: var(--spacing-md);
      flex-direction: column;
      align-items: flex-start; // Align items to the start
      gap: 0; 
      width: fit-content;
      margin:auto;
      margin-bottom: 1em;
      .step-nav-item {
        display: flex;
        align-items: center;
        text-align: left;
        gap: var(--spacing-lg);
        width: 100%;
        max-width: 350px; // Or a suitable max-width
        margin: 0 ;

        .step-title {
          margin-top: 0;
        }
      }
      
      .step-line {
        flex: unset; // Unset flex properties
        width: 8px;
        height: 50px;
        margin: var(--spacing-sm) 0;
        // Position the vertical line correctly
        position: relative;
        left: 26px; // (60px button width / 2) - (8px line width / 2)

        margin-right: auto;
        
        &::before {
          transition: height 0.2s ease;
          width: 100%;
          height: 0%; // Animate height instead of width
        }

        &.active::before {
          height: 100%;
        }
      }
    }

    .step-showcase-container {
      padding: 0; 

      .prev-step-btn {
        left: var(--spacing-md);
        top:100px;

      }
      .next-step-btn {
        right: var(--spacing-md);
        top:100px;
      }

      .step-showcase-item {
        grid-template-columns: 1fr;
        text-align: left; // Align text naturally
        padding: var(--spacing-lg); 
        padding-bottom:var(--spacing-xl);
        background-color: var(--gray-200);



        .icon-wrapper {
          // Center the icon when it's on its own row
          margin: 1.25em auto;
        }

        .content {
          .cta-container {
            justify-content: flex-start; // Align CTAs naturally
            gap: var(--spacing-md); // Increase gap
          }
        }
      }
    }
  }
}
</style>